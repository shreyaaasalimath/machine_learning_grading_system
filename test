import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import requests
import json
import base64
import os
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from tkinter import OptionMenu
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk import WordNetLemmatizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import tkinter as tk
from fpdf import FPDF
def save_pdf(labels):
    pdf = FPDF()
    pdf.set_font("Arial", size=15)
    pdf.add_page()  # Add a new page

    for label in labels:
        print(type(label))
        result = '\t'.join(str(value) for value in label)
        print(result)
        pdf.cell(200, 10, txt=result, ln=True, align='C')

    pdf.output("result.pdf")

    
def create_table_window(sim,avg):
    # Create the Tkinter window
    window = tk.Tk()
    
    # Calculate the center position of the window
    window_width = 400  # Adjust as needed
    window_height = 300  # Adjust as needed
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x = (screen_width // 2) - (window_width // 2)
    y = (screen_height // 2) - (window_height // 2)
    window.geometry(f"{window_width}x{window_height}+{x}+{y}")
    
    # Create the table frame
    avg=avg*100
    table_frame = tk.Frame(window)
    table_frame.pack(pady=20)
    r1=sim[0]*100 if len(sim)>=1 else 'NA'
    r2=sim[1]*100 if len(sim)>=2 else 'NA'
    r3=sim[2]*100 if len(sim)>=3 else 'NA'
    # Create the table labels
    if avg>=90:
        clas='A+'
    elif avg>=80:
        clas='A'
    elif avg>=70:
        clas='B'
    elif avg>=60:
        clas='C'
    elif avg>=50:
        clas='D'
    elif avg>=40:
        clas='E'
    else:
        clas='F'
    labels = [
        ['Question Number','Percentage'],
        ['Q1', round(r1,2)],
        ['Q2', round(r2,2)],
        ['Q3', round(r3,2)],
        ['Average', round(avg,2)],
        ['Class', clas]
    ]
    save_pdf(labels)
    
    for row_idx, row_labels in enumerate(labels):
        for col_idx, label_text in enumerate(row_labels):
            label = tk.Label(table_frame, text=label_text, borderwidth=1, relief="solid", width=20, padx=5, pady=5)
            label.grid(row=row_idx, column=col_idx, padx=5, pady=5)
    
    # Run the Tkinter event loop
    window.mainloop()

# Preprocessing and NLP
def preprocess(text):
    # Lowercase conversion
    text = text.lower()

    # Remove newline characters
    text = text.replace('\n', '')

    # Remove punctuation and special characters
    text = ''.join([char for char in text if char.isalnum() or char.isspace()])

    # Tokenize the text
    tokens = word_tokenize(text)

    # Remove stop words
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]

    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]

    return tokens

# Calculate cosine similarity
def calculate_cosine_similarity(text1, text2):

    # Convert the preprocessed texts to strings
    preprocessed_text1 = ' '.join(text1)
    preprocessed_text2 = ' '.join(text2)

    # Calculate TF-IDF vectors
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform([preprocessed_text1, preprocessed_text2])

    # Calculate cosine similarity
    similarity = cosine_similarity(tfidf_matrix[0], tfidf_matrix[1])[0][0]

    return similarity
def extract_matching_words(word_list, combined_word):
    matching_words = []
    for word in word_list:
        if word in combined_word:
            matching_words.append(word)
    return matching_words,1
def calc_simi(answer):
    global subject
    with open('iot.txt', 'r') as file:
        file_contents = file.read()

    # Preprocess the text file contents
    preprocessed_contents = file_contents.replace('\n', '').replace('  ', '')

    # Evaluate the preprocessed contents as a Python expression
    iot = eval(preprocessed_contents)
    file.close()
    with open('uid.txt', 'r') as file:
        file_contents = file.read()

    # Preprocess the text file contents
    preprocessed_contents = file_contents.replace('\n', ' ').replace('  ', ' ')

    # Evaluate the preprocessed contents as a Python expression
    uid = eval(preprocessed_contents)
    file.close()
    sim=[]
    n=0
    if subject=="IoT":
        with open("iot_answer.txt", 'w', encoding='utf-8') as f:
            f.write('')
            f.close()
        i=1
        for key, value in answer.items():
            a1=preprocess(value)
            for a in a1:
                matching,x = extract_matching_words(iot[key], a)
                if x==1:
                    a1.remove(a)
                    for j in matching:
                        a1.append(j)
            result = ','.join(a1)
            with open("iot_answer.txt", 'a', encoding='utf-8') as f:
                f.write(str(i)+":"+result+"\n")
                i+=1
            f.close()
            sim.append(calculate_cosine_similarity(a1,iot[key]))
            n+=1
    elif subject=="UID":
        with open("uid_answer.txt", 'w', encoding='utf-8') as f:
            f.write('')
            f.close()
        i=1
        for key, value in answer.items():
            a1=preprocess(value)
            for a in a1:
                matching,x = extract_matching_words(iot[key], a)
                if x==1:
                    a1.remove(a)
                    for j in matching:
                        a1.append(j)
            result=','.join(a1)
            with open("uid_answer.txt", 'a', encoding='utf-8') as f:
                f.write(str(i)+":"+result+"\n")
                i+=1
            f.close()
            sim.append(calculate_cosine_similarity(a1,uid[key]))
            n+=1        
    print(sim)
    print(n)
    sum=0
    for a in sim:
        sum+=a
    print("COS:",sum/n)
    create_table_window(sim,sum/n)
            
    
    
def gen_text():
    api_key = "AIzaSyBc7M_1QB7hUNi3Ho8-sGbmi0TVXvDoaRA"
    url = "https://vision.googleapis.com/v1/images:annotate?key=" + api_key
    # Load image data from file into memory
    answer={}
    global subject
    for name in os.listdir('./'+subject):
        count=int(name[0])
        key=count
        if key in answer.keys():
            pass
        else:
            answer[key]=''
        with open('./'+subject+'/'+name, 'rb') as image_file:
            image_content = image_file.read()
        image_content_base64 = base64.b64encode(image_content).decode('utf-8')
        request_json = {
          "requests": [
            {
              "image": {
                "content": image_content_base64
              },
              "features": [
                {
                  "type": "DOCUMENT_TEXT_DETECTION"
                }
              ]
            }
          ]
        }

        # Send the request to the Vision API
        response = requests.post(url, data=json.dumps(request_json))

        # Process the response
        response_json = json.loads(response.text)

        if 'error' in response_json:
            print(f"Error: {response_json['error']['message']}")
        else:
            text = response_json['responses'][0]['fullTextAnnotation']['text']
            answer[key]+=text
    print(answer)
    calc_simi(answer)

def save_image(image, box, subject, name):
    filename = f"{subject}/{name}.jpg"
    
    # Check if the filename already exists
    if os.path.exists(filename):
        # If it does, add a suffix to the filename
        i = 1
        while os.path.exists(f"{subject}/{name}_{i}.jpg"):
            i += 1
        filename = f"{subject}/{name}_{i}.jpg"
    cropped_image = image.crop(box)
    cropped_image.save(filename, 'JPEG')
    
    # Clear the canvas
    canvas.delete("all")

def select_image():
    """
    Ask the user to select an image file, then display it in a canvas.
    """
    # Ask the user to select an image file
    file_path = filedialog.askopenfilename()
    
    if file_path:
        # Load the image and display it in a canvas
        global image
        image = Image.open(file_path)
        image = image.resize((400, 400), Image.ANTIALIAS)
        photo = ImageTk.PhotoImage(image)
        canvas.create_image(0, 0, anchor='nw', image=photo)
        canvas.image = photo
        
        # Bind the mouse click event to the canvas
        canvas.bind("<ButtonPress-1>", start_selection)

def start_selection(event):
    """
    Start the selection process when the user clicks on the canvas.
    """
    global selection_box
    selection_box = [event.x, event.y, event.x, event.y]
    canvas.bind("<B1-Motion>", update_selection)
    canvas.bind("<ButtonRelease-1>", end_selection)

def update_selection(event):
    """
    Update the selection box as the user drags the mouse.
    """
    global selection_box
    canvas.delete("selection_box")
    selection_box[2] = event.x
    selection_box[3] = event.y
    canvas.create_rectangle(*selection_box, outline='red', tags="selection_box")

def end_selection(event):
    """
    End the selection process and save the selected portion of the image.
    """
    global selection_box, image,subject
    
    # Unbind the mouse events
    canvas.unbind("<B1-Motion>")
    canvas.unbind("<ButtonRelease-1>")
    
    # Prompt the user for a name to save the selected portion of the image
    name = name_entry.get()
    subject = selected_subject.get()
    if name and subject:
        save_image(image, selection_box, subject, name)
    
    # Prompt the user for the next image selection
    next_image = tk.messagebox.askyesno("Next Image", "Do you want to select another image?")
    if next_image:
        # Clear the canvas and reset the selection box
        canvas.delete("all")
        name_entry.delete(0, tk.END)
        selection_box = None
    else:
        # Close the window
        root.destroy()
        gen_text()

# Create the main window and canvas
root = tk.Tk()
root.title("Answer Selector")
root.geometry("600x600") 
canvas = tk.Canvas(root, width=400, height=400)
canvas.place(x=0, y=50)

# Create a button to select an image
select_button = tk.Button(root, text="Select Image", command=select_image)
select_button.place(x=0, y=450)

# Create a label and entry box for adding a name to save the selected portion of the image
name_label = tk.Label(root, text="Enter question number:")
name_label.place(x=0, y=0)
name_entry = tk.Entry(root)
name_entry.place(x=150, y=0)
name_label = tk.Label(root, text="Select Subject:")
name_label.place(x=0, y=30)
subject_options = ["IoT", "UID", "Subject 3"]
selected_subject = tk.StringVar(root)
selected_subject.set(subject_options[0])
subject_option_menu = OptionMenu(root, selected_subject, *subject_options)
subject_option_menu.place(x=150, y=30)
# Run the main loop
root.mainloop()
